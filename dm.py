
import math
from fractions import gcd 
import time
import random, sys, os, math
from random import randint

def rabinMiller(n):
     s = n-1
     t = 0
     while s&1 == 0:
         s = s/2
         t +=1
     k = 0
     while k<128:
         a = random.randrange(2,n-1)
         v = pow_mod(a,s,n)
         if v != 1:
             i=0
             while v != (n-1):
                 if i == t-1:
                     return False
                 else:
                     i = i+1
                     v = (v**2)%n
         k+=2
     return True
def pow_mod(x, y, z):
    number = 1
    while y:
        if y & 1:
            number = number * x % z
        y >>= 1
        x = x * x % z
    return number

def isPrime(n):
     lowPrimes =   [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97
                   ,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179
                   ,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269
                   ,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367
                   ,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461
                   ,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571
                   ,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661
                   ,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773
                   ,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883
                   ,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]
     if (n >= 3):
         if (n&1 != 0):
             for p in lowPrimes:
                 if (n == p):
                    return True
                 if (n % p == 0):
                     return False
             return rabinMiller(n)
     return False

def generateLargePrime(k):
     r=100*(math.log(k,2)+1)
     r = int(r)
     while r>0:
         n = random.randrange(2**(k-1),2**(k))
         r-=1
         if isPrime(n) == True:
             return n

def pow_mod(x, y, z):
    number = 1
    while y:
        if int(y) & int(1):
            number = number * x % z
        y = int(y)
        y >>= 1
        x = x * x % z
    return number
martin_n = 239255299284384349304725149856552492038598445886956658797340414572081315025316855599003056773010145489861807217942474066769254994889937350554812114599199747011822931003470188469755565575428252755498450043694308433269873821720504733262583005940196298951811543171416951549542705533417999736765774452030314635913103516225119401185982005668156650192848448135779911780427770251154346413709247810959979685820122190878080140819951259653464493002404315741219936122712441337048287859676453307655235582246940129654549936418104588280142515645148689690033053995534499764950491215574658031050257809925263610106291
martin_e = 51831672085074814178680269722598016921936838558306727005991561731670505910386509866184899294113023750765710594543251856658239666016521056714215727353889825219309912019100396570607753922542886645209401533085461587994461683838141339926725638136349726690307472237142348752101995510115124409635193574780938087738364459858781987481597603026016849697794677

#p = 290245329165570025116016487217740287508837913295571609463914348778319654489118435855243301969001872061575755804802874062021927719647357060447135321577028929269578574760547268310055056867386875959045119093967972205124270441648450825188877095173754196346551952542599226295413057787340278528252358809329
#q = 531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219

def LDEsolve(a,b,c=1):
	q, r = divmod(a,b)
	if r == 0:
		return( [0,math.trunc(c/b)] )
	else:
		sol = LDEsolve( b, r, c )
		u = sol[0]
		v = sol[1]
		return( [ math.trunc(v), math.trunc(u - q*v) ] )

def encryption(M, e, n):
    C = pow_mod(x = M, y = e, z = n)
    print("C: ", C)

def decryption(C, d, n):
    D = pow_mod(x = C, y = d, z = n)
    print("D: " ,D)

def generateKey():
     p = generateLargePrime(300)
     q = generateLargePrime(300)
     n = p*q
     phi = (p-1)*(q-1)
     e = 70001
     d = LDEsolve(a=e, b =phi)[0]
     encryption(M = M, e = martin_e, n = martin_n)
#print(d)
#MY PUBLIC KEY = (e, n)
#MY PRIVATE KEY = (d, n)
#M = 87104097116032105115032070111114114101115116032071117109112039115032101109097105108032112097115115119111114100063032082097098101101097032065104109097100032050048054050048048051056
#C = 83504007000835387032992128055658677076836379459573417682755262076420164186757826955969641370440720713499611782004786198404570390930488413728067240381344081254415610517187793383293234732601605003807074580887622526490304472798311644423336643230100048156126674448718428094049785992116674739937951588133171343110983583900986592774123336231863290170852204507291080577445413831340706618207163303844701415817496922382987599137804267809144924910727660296802756781245245106796839787620438396606585308925675873745428309941413452987140132442899271455051449858525809832349518653710711347256138596936998730836106
#C = pow_mod(x = M, y = martin_e, z = martin_n)
#M = 73116226128153115032097099116117097108108121032226128152049102111114101115116049226128153046032066097116109097110226128153115032112097115115119111114100032105115032112114111098097098108121032115117112101114109097110115117120049050051032098101099097117115101032105116226128153115032115111109101116104105110103032104101226128153108108032110101118101114032104097118101032116111032119111114114121032097098111117116032102111114103101116116105110103046
#C = pow_mod(x = M, y = martin_e, z = martin_n)
#D = pow_mod(x = C, y = d, z = n)
#print("D = ", D)
#print(C, " = (", M, "**", e, "(mod", n, ")")

#encrypt message to martin pei with his e and n where 0<m<n
# C = M^e(mod n) (use square and multiply)

# post that in the excel file

#to decrpyt his response:
#D = his message ^ my d (mod my n)

#83504007000835387032992128055658677076836379459573417682755262076420164186757826955969641370440720713499611782004786198404570390930488413728067240381344081254415610517187793383293234732601605003807074580887622526490304472798311644423336643230100048156126674448718428094049785992116674739937951588133171343110983583900986592774123336231863290170852204507291080577445413831340706618207163303844701415817496922382987599137804267809144924910727660296802756781245245106796839787620438396606585308925675873745428309941413452987140132442899271455051449858525809832349518653710711347256138596936998730836106